## IMPORTS

import os
import sys
import time
import math
from datetime import datetime
from io import StringIO


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from numpy.polynomial.polynomial import Polynomial
import scipy.integrate as integrate
import scipy.optimize as sco
from scipy.optimize import minimize
from sklearn.metrics import mean_squared_error
import openpyxl
import networkx as nx
import sklearn.metrics
from IPython.core.display import HTML
import plotly.io as pio
from openpyxl.utils.dataframe import dataframe_to_rows
import openpyxl as opxl
import matplotlib.ticker as mtick
from matplotlib.cm import get_cmap
import time


# sys.path.append(r'D:\seagu_OneDrive\Documents\GitHub\parallel-flow-distribution-pressure-loss\ansys')
sys.path.append(r'G:\Mon Drive\GitHub\PVT-thermal-performance-model')

sys.path.append(r'G:\Mon Drive\GitHub\PVT-PL-model\ansys')


import jou_gen as jg
import ansys_py_bridge as apb
# import ansys.fluent.core as pyfluent
import model as ty
import proc as pr
import plot_functions_here as pfun
import heat_transfer as bht
import fluids as fds
import ht
import general as gen

## Fonctions

def init_hyp(hypotheses_path, stepConditions) :
    hyp = pr.create_dict_from_excel(hypotheses_path,'Main')
    big_it = hyp['big_it']
    T_amb = stepConditions['T_amb']
    T_fluid_in0 = stepConditions['T_fluid_in0']
    return hyp, big_it, T_amb, T_fluid_in0

def read_Inputs_PyFluent(Inputs_PyFluent_path):
    Inputs_PyFluent = pd.read_excel(Inputs_PyFluent_path)
    Inputs_PyFluent.drop(columns=['comment'], inplace=True, errors='ignore')
    Inputs_PyFluent.set_index('named_expression', inplace=True)

    return Inputs_PyFluent

def create_folder_paths(folder_path, case, case_name = 'cas_') : 
    folder_path_geom = os.path.join(folder_path, f'{case_name}{case}')
    if not os.path.exists(folder_path_geom):
        os.makedirs(folder_path_geom)
    return folder_path_geom

def create_save_paths(hyp, folder_path_case, big_it):
    hyp['CFD_ht_path'] = os.path.join(folder_path_case, 'test')

    file_path_result_CFD = hyp['CFD_ht_path'] + f'_{big_it}.csv' ## On ne peut pas l'appeler autrement pour le moment, il y a un appel dans la fonction simu_on_steadyState
    file_path_result_slices_df = hyp['CFD_ht_path'] + '_slices_df' + f'_{big_it}.csv'
    file_path_result_df_one = hyp['CFD_ht_path'] + '_df_one' + f'_{big_it}.csv'
    file_path_result_PyFluent = hyp['CFD_ht_path'] + '_PyFluent' + f'_{big_it}.csv'

    return file_path_result_CFD, file_path_result_PyFluent, file_path_result_df_one, file_path_result_slices_df

def init_mesh(tui, geometries_dict, geom) :
    geom_path = geometries_dict['mesh_path'].iloc[geom]
    geom_name = geometries_dict['mesh_name_wo_ext'].iloc[geom]
    jg.change_mesh(tui, geom_path, geom_name)
    jg.create_radiation(tui, geom_name)

def init_solver(folder_path_ansys, server_code):
    """Initialize the tui and solver objectfs for PyFluent
    
    Args:
        folder_path_ansys (str): Path to the folder containing the server_info file
        server_code (str): Code of the server generated by Fluent
        
    Returns:
        tui (object): TUI object
        solver (object): Solver object
    """

    solver_path = folder_path_ansys + '\server\\' + f'server_info-{server_code}.txt'
    solver = pyfluent.connect_to_fluent(server_info_file_name=solver_path)
    tui = solver.tui
    return tui, solver

def modify_invariable(tui, Inputs_PyFluent):
    theta = apb.get_value('theta', 'named_expression', Inputs_PyFluent)
    jg.change_gravity(tui, theta)
    jg.change_named_expression(tui, 'T_amb', T_amb, 'K')

def fill_Pyfluent(Inputs_PyFluent, df_one, res, T_fluid_in0) :

    nb_hx = int(Inputs_PyFluent.loc['nb_hx','value'])

    Inputs_PyFluent.loc['T_fluid_in_man', 'value'] = T_fluid_in0

    e_PV = Inputs_PyFluent.loc['e_PV','value'] # m
    L_PV = Inputs_PyFluent.loc['L_PV','value'] # mm
    w_PV = Inputs_PyFluent.loc['w_PV','value'] # mm

    volume_PV = L_PV * w_PV * e_PV * 1e-6

    Inputs_PyFluent.loc['Heat_Generation_Rate', 'value'] = - df_one['Qdot_PV_sky'].values[0]/volume_PV

    for i in range(1, nb_hx + 1):
        Inputs_PyFluent.loc[f'a_f_{i}', 'value'] = res[f'part{i}']['slices_df']['a_f'].values[0]
        Inputs_PyFluent.loc[f'b_f_{i}', 'value'] = res[f'part{i}']['slices_df']['b_f'].values[0]
    
def init_ANSYS_parameters(tui, Inputs_PyFluent) :
    for i, named_expression in enumerate(Inputs_PyFluent):
        value = Inputs_PyFluent.loc['named_expression', 'value']
        unit = Inputs_PyFluent.loc['named_expression', 'unit']
        jg.change_named_expression(tui, named_expression, value, unit)
    
def fill_temperature(Inputs_PyFluent, res) :
    nb_hx = int(Inputs_PyFluent.loc['nb_hx','value'])
    
    for i in range(2, nb_hx+2) :        

        Inputs_PyFluent.loc[f'T_fluid_in_{i-1}', 'value'] = res[f'part{i}']['df_one']['T_fluid_in'].loc[0]

    Inputs_PyFluent.loc['T_fluid_in_man', 'value'] = res['part1']['df_one']['T_fluid_mean'].loc[0]
    Inputs_PyFluent.loc['T_fluid_out_man', 'value'] = res['part7']['df_one']['T_fluid_mean'].loc[0]


def save_simu_1D(res, nb_hx, file_path_result_df_one, file_path_result_slices_df) :
        keys = list(res['part1']['df_one'].keys())
        values_dict = {key: [] for key in keys}

        for i in range(1, nb_hx+3):
            part_key = f'part{i}'
            if part_key in res:
                for key in keys:
                    values_dict[key].append(res[part_key]['df_one'][key].values[0])

        result_1D_df_one = pd.DataFrame(values_dict)

        result_1D_df_one.index = [f'part{i}' for i in range(1, nb_hx + 3)]
        result_1D_df_one.to_csv(file_path_result_df_one,sep=';', index=False)

        keys = list(res['part1']['slices_df'].keys())
        values_dict = {key: [] for key in keys}

        for part in range(1, nb_hx+3):
            part_key = f'part{part}'
            if part_key in res:
                for key in keys:
                    values_dict[key].append(res[part_key]['slices_df'][key].values[0])

        result_1D_slices_df = pd.DataFrame(values_dict)
        result_1D_slices_df.index = [f'part{i}' for i in range(1, nb_hx+3)]
        result_1D_slices_df.to_csv(file_path_result_slices_df,sep=';', index=False)

def change_ANSYS_parameters(tui, Inputs_PyFluent):
        nb_hx = int(apb.get_value('nb_hx', 'named_expression', Inputs_PyFluent))
        for part in range(1, nb_hx+1):
            T_fluid_in = apb.get_value(f'T_fluid_in_{part}', 'named_expression', Inputs_PyFluent)
            a_f = apb.get_value(f'a_f_{part}', 'named_expression', Inputs_PyFluent)
            b_f = apb.get_value(f'b_f_{part}', 'named_expression', Inputs_PyFluent)
            jg.change_named_expression(tui, f'T_fluid_in_{part}', T_fluid_in, 'K')
            jg.change_named_expression(tui, f'a_f_{part}', a_f, 'm^-1')
            jg.change_named_expression(tui, f'b_f_{part}', b_f, 'K m^-1')
        Heat_Generation_Rate=apb.get_value('Heat_Generation_Rate', 'named_expression', Inputs_PyFluent)
        jg.change_named_expression(tui, 'Heat_Generation_Rate', Heat_Generation_Rate, 'W/m^3')
        T_fluid_in_man=apb.get_value('T_fluid_in_man', 'named_expression', Inputs_PyFluent)
        jg.change_named_expression(tui, 'T_fluid_in_man',T_fluid_in_man, 'K')
        T_fluid_out_man=apb.get_value('T_fluid_out_man', 'named_expression', Inputs_PyFluent)
        jg.change_named_expression(tui, 'T_fluid_out_man', T_fluid_out_man, 'K')

def compute_result_CFD(tui, folder_path_case, file_path_result_CFD, file_path_result_PyFluent, Inputs_PyFluent, panelSpecs, big_it) :
        
        nb_hx = int(Inputs_PyFluent['nb_hx'])

        jg.write_report(tui,'ht',folder_path_case,f'ht_tot_report_{big_it}')
        jg.write_report(tui,'rad_ht',folder_path_case,f'ht_rad_report_{big_it}')

        Qdot_tot = pd.read_csv(os.path.join(folder_path_case,f'ht_tot_report_{big_it}.csv'))
        Qdot_rad = pd.read_csv(os.path.join(folder_path_case,f'ht_rad_report_{big_it}.csv'))

        Qdot = pd.merge(Qdot_tot,Qdot_rad, on='Component')
        Qdot['conv_ht'] = Qdot['ht'] - Qdot['rad_ht']
        Qdot.set_index('Component', inplace=True)

        Qdot.to_csv(os.path.join(folder_path_case,f'all_ht_report_{big_it}.csv'))

        parts_tube_back = [
            ['manifold_yu'],
            ['hx_bend_yu_air', 'hx_bend_yu_pv'],
            ['hx_flat_yu_air'],
            ['hx_bend_mid_air', 'hx_bend_mid_pv'],
            ['hx_flat_yd_air'],
            ['hx_bend_yd_air', 'hx_bend_yd_pv'],
            ['manifold_yd']
        ]

        parts_top = [
            [],
            [],
            ['hx_flat_yu_pv-pv_backsheet-cd-cd1-pv-corps'],
            [],
            ['hx_flat_yd_pv-pv_backsheet-cd-cd1-pv-corps'],
            [],
            []
        ]

        parts_tube_fluid = [
            ['manifold_yu'],
            ['hx_bend_yu_air', 'hx_bend_yu_pv'],
            ['hx_flat_yu_air', 'hx_flat_yu_pv-pv_backsheet-cd-cd1-pv-corps'],
            ['hx_bend_mid_air', 'hx_bend_mid_pv'],
            ['hx_flat_yd_air', 'hx_flat_yd_pv-pv_backsheet-cd-cd1-pv-corps'],
            ['hx_bend_yd_air', 'hx_bend_yd_pv'],
            ['manifold_yd']
        ]

        PV = ['pv_front', 'pv_backsheet']

        Qdot_tube_back = []
        Qdot_top = []
        Qdot_top_rad = []
        Qdot_tube_fluid = []
        Qdot_PV_sky = []

        phi = pd.read_csv(r"G:\Drive partagés\Cercle Hard\R&D\Modèles numériques PVT\PVT-perf-1Dmodel\CFD\test\phi_template.csv", sep=";")
        phi.set_index('component', inplace=True)

        Areas_top = [ pr.top_area_tube_contact_PV(panelSpecs[part])/4.75 for part in panelSpecs['decomp'].keys() if part != 'main']
        Areas_back = [ pr.back_area_tube_conv_and_rad(panelSpecs[part])/4.75 for part in panelSpecs['decomp'].keys() if part != 'main']

        for i in range(1, nb_hx + 3):
            if i == 3 or i == 5:

                phi.loc[f'part{i}', 'phi_tube'] = Qdot[Qdot.index.isin(parts_tube_back[i - 1])]['ht'].sum() / Areas_top[i - 1]

                phi.loc[f'part{i}', 'phi_top'] = Qdot[Qdot.index.isin(parts_top[i - 1])]['ht'].sum() / Areas_top[i - 1] if i in [3,5] else 1e-10

                phi.loc[f'part{i}', 'phi_abs'] = 1e-6
        
        phi.to_csv(file_path_result_CFD)

def save_Pyfluents(Inputs_PyFluent, file_path_result_PyFluent) :
    Inputs_PyFluent.to_csv(file_path_result_PyFluent,sep=';', index=False)

def increment_big_it(hyp, big_it) :
        big_it = big_it + 1
        hyp['big_it'] = big_it
        file_path_result_CFD = hyp['CFD_ht_path']+f'_{big_it}.csv' ## On ne peut pas l'appeler autrement pour le moment, il y a un appel dans la fonction simu_on_steadyState
        file_path_result_slices_df = hyp['CFD_ht_path']+'_slices_df' + f'_{big_it}.csv'
        file_path_result_df_one = hyp['CFD_ht_path']+'_df_one' + f'_{big_it}.csv'
        file_path_result_PyFluent = hyp['CFD_ht_path']+'_PyFluent' + f'_{big_it}.csv'
        return file_path_result_CFD, file_path_result_PyFluent, file_path_result_df_one, file_path_result_slices_df

def write_files(tui, folder_path_case, case, big_it) :
        jg.write_data(tui, folder_path_case, f'cas{case}_it{big_it}')
        jg.write_residuals_file(tui, folder_path_case, f'residuals_cas{case}_it{big_it}')
        jg.write_case(tui, folder_path_case, f'cas{case}_it{big_it}')
        jg.compute_mass_flow_rate(tui, 'face-inlet-under-panel', folder_path_case, f'mass_flow_rate_cas{case}_it{big_it}')
        jg.compute_temp_avg(tui, 'face-oulet-under-panel', folder_path_case, f'temp_outlet_cas{case}_it{big_it}')


def simu_bridge_cases(tui, solver, folder_path, hypotheses_path, panelSpecs, Inputs_PyFluent, steadyStateConditions_dict, nb_it = 50, nb_big_it = 5, T_out_diff_convergence_control = 0.05, method = 'bridge'):

    log_df = pd.DataFrame(columns=['iteration', 'time', 'log'])
    nb_case = len(steadyStateConditions_dict)
    nb_hx = int(Inputs_PyFluent.loc['nb_hx','value'])

    for case in range(nb_case):

        stepConditions = steadyStateConditions_dict[case]

        if stepConditions['u'] > 0:
            bc_to_init = "cd2_wind"
            c = stepConditions['u']
        else:
            bc_to_init = "cd_fc"
            c = 0.01

        T_out_init = 0.

        hyp, big_it, T_amb, T_fluid_in0 = init_hyp(hypotheses_path, stepConditions)
        
        folder_path_case = create_folder_paths(folder_path, case, case_name = 'cas_')
        file_path_result_CFD, file_path_result_PyFluent, file_path_result_df_one, file_path_result_slices_df = create_save_paths(hyp, folder_path_case, big_it)

        df_one, res = ty.simu_one_steady_state_all_he(panelSpecs, stepConditions[case], hyp)
        T_out = T_out_init
        T_out_init = df_one['T_fluid_out'].loc[0]

        hyp['method_h_top_g_exchanger'] = 'CFD'
        hyp['method_h_back_abs'] = 'CFD'
        hyp['method_h_back_tube'] = 'CFD'
        hyp['method_h_rad_back_tube'] = 'CFD'

        fill_Pyfluent(Inputs_PyFluent, df_one, res, T_fluid_in0)
        fill_temperature(Inputs_PyFluent, res)

        init_ANSYS_parameters(tui, Inputs_PyFluent)
    
        if method == 'uniform':
             Inputs_PyFluent.loc['T_fluid_in_1', 'value'] = T_fluid_in0

        cy = c/np.sqrt(2)
        cz = - c/np.sqrt(2)

        # L_abs = panelSpecs['main']['L_abs']
        # c = bht.speed_natural_convection(T_fluid_in0, T_amb, theta,L_abs)

        jg.standard_initialization(tui, bc_to_init, 0, 0, cy, cz)

        while big_it < nb_big_it :

            time_start = time.time()

            # Save 1D
            save_simu_1D(res, nb_hx, file_path_result_df_one, file_path_result_slices_df)

            # CFD
            solver.solution.run_calculation.iterate(number_of_iterations=nb_it)
            compute_result_CFD(tui, folder_path_case, file_path_result_CFD, file_path_result_PyFluent, Inputs_PyFluent, panelSpecs, big_it) # on remplit les phis
            save_Pyfluents(Inputs_PyFluent, file_path_result_PyFluent) 
            write_files(tui, folder_path_case, case, big_it)

            try:

                # 1D
                df_one, res = ty.simu_one_steady_state_all_he(panelSpecs, stepConditions[case], hyp)

                # On alimente la CFD
                fill_Pyfluent(Inputs_PyFluent, res, T_fluid_in0, nb_hx)
                fill_temperature(Inputs_PyFluent)
 
                if big_it < nb_big_it - 1:
                    change_ANSYS_parameters(tui, Inputs_PyFluent)

                increment_big_it(hyp, big_it)

            except:
                time_end = time.time()
                log_df.loc[big_it] = {'iteration': big_it, 'time': time_end - time_start, 'log' : f'1D model error at big it : {big_it}'}
                break

            if abs(T_out-T_out_init)< T_out_diff_convergence_control:
                time_end = time.time()
                log_df.loc[big_it] = {'iteration': big_it, 'time': time_end - time_start, 'log' : f'temperature profile converged at big it : {big_it}'}
                save_simu_1D(res, nb_hx, file_path_result_df_one, file_path_result_slices_df)

                break

            else:
                time_end = time.time()
                log_df.loc[big_it] = {'iteration': big_it, 'time': time_end - time_start, 'log' : 'continue' if big_it < nb_big_it else 'big it limit reached'}

        log_df.to_csv(os.path.join(folder_path_case,f'log_cas_{case}.csv'))